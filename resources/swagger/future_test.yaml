openapi: 3.0.3
info:
  title: Future test
  description: |-
    # Тестовое задание на позицию php разработчика
    https://github.com/fugr-ru/php-laravel
    ***
    Результат выполнения задания нужно будет оформить здесь же, на гитхабе. В качестве ответа не нужно присылать никаких ZIP-архивов и наборов файлов. Все ваши ответы должны быть оформлены на https://github.com/ или на https://bitbucket.org/ Присылаете ссылку на ваш репозиторий в форму https://24.future-group.ru/pub/form/4/xnof82/.

    Если у вас еще нет аккаунта на github, то это хороший повод его завести.

    Если есть вопросы, вы всегда их можете задать в чате https://t.me/futuregroup_php_chat

    ЕСЛИ ВЫСЫЛАЕТЕ ПОДОБНОЕ ЗАДАНИЕ, ТО ПОДГОТОВЬТЕ ОПИСАНИЕ ФУНКЦИОНАЛА ДЛЯ ПРОВЕРЯЮЩЕГО.

    Срок 5 рабочих дней с момента получения задания, срок проверки — 5 рабочих дней. Мы отправим ответ на email, если ответа нет, проверьте спам.

    ## Задание
    ***
    Разработать REST API для записной книжки. Примерная структура методов:
    ```shell
    1.1. GET /api/v1/notebook/
    1.2. POST /api/v1/notebook/
    1.3. GET /api/v1/notebook/<id>/
    1.4. POST /api/v1/notebook/<id>/
    1.5. DELETE /api/v1/notebook/<id>/
    ```
    Поля для POST записной книжки:
    ```shell
    1. ФИО (обязательное)
    2. Компания
    3. Телефон (обязательное)
    4. Email (обязательное)
    5. Дата рождения
    6. Фото
    ```
    Нужна возможность выводить информацию в списке по странично

    Swagger для отображения методов api (https://swagger.io/)

    Так же напишите нам, как вы тестировали результат своей работы. Какие используете инструменты и как вы осуществляете тестирование.

    Дополнительным плюсом будет: Финальный билд приложения должен быть запускаться из Docker контейнера (хотя бы с минимальной конфигурацией)
    ***
    REST API notebook [GitHub repo](https://github.com/AslanAV/future-test)

    | **method** 	 |    **route**      	    | **name(route)** 	  |    **Controller**       	    |
    |:------------:|:----------------------:|:------------------:|:----------------------------:|
    |   GET    	   |  api/v1/notebook   	   | notebook.index  	  | NoteBookController@index  	  |
    |  POST    	   |  api/v1/notebook   	   | notebook.store  	  | NoteBookController@store  	  |
    |   GET    	   | api/v1/notebook/{id} 	 |  notebook.show  	  |  NoteBookController@show  	  |
    | PUT/PATCH 	  | api/v1/notebook/{id} 	 | notebook.update 	  | NoteBookController@update 	  |
    |  DELETE   	  | api/v1/notebook/{id} 	 | notebook.destroy 	 | NoteBookController@destroy 	 |

    ***

    [Тесты API](https://github.com/AslanAV/future-test/blob/main/tests/Feature/NotebookTest.php)

    ***

  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: Future-test
    description: Notebook for contacts
    externalDocs:
      description: Find out more
      url: https://github.com/AslanAV/future-test
paths:
  /api/v1/notebook:
    get:
      tags:
        - /api/v1/notebook
      summary: Get all contacts
      description: Get all contacts with paginate
      operationId: GetAllContacts
      responses:
        '200':
          description: Successful operation
        '404':
          description: Invalid status value
    post:
      tags:
        - /api/v1/notebook
      summary: Add a new contact to the store
      description: Add a new contact to the store
      operationId: addContact
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '405':
          description: Invalid input
  /api/v1/notebook/{id}:
    get:
      tags:
        - /api/v1/notebook/{id}
      summary: Get contact form id
      description: Get contact for id
      operationId: GetContactForId
      parameters:
        - name: id
          in: path
          description: ID of contact to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '404':
          description: Invalid status value
    put:
      tags:
        - /api/v1/notebook/{id}
      summary: Put data for Contact by id
      description: Put data for Contact by id
      operationId: PutDataForContacts
      parameters:
        - name: id
          in: path
          description: ID of contact to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        '400':
          description: Invalid status value
    patch:
      tags:
        - /api/v1/notebook/{id}
      summary: Patch data for Contact by id
      description: Patch data for Contact by id
      operationId: PatchDataForContacts
      parameters:
        - name: id
          in: path
          description: ID of contact to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        '400':
          description: Invalid status value
    delete:
      tags:
        - /api/v1/notebook/{id}
      summary: Deletes a contact
      description: delete a contact
      operationId: deleteContact
      parameters:
        - name: id
          in: path
          description: Coontact id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
components:
  schemas:
    Contact:
      required:
        - family_name_first_name_patronymic
        - phone
        - email
      type: object
      properties:
        family_name_first_name_patronymic:
          type: string
          example: Ivanov Ivan Ivanich
        phone:
          type: string
          example: 79876543210
        email:
          type: string
          example: ivan@ivanov.ru
        company:
          type: string
          example: home
        birthday:
          type: integer
          format: int64
          example: 1660338149
        photo:
          type: string
          example: https://ya.ru/ivanov.jpg
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Contact:
      description: Contact object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Contact'
